#!/bin/bash
#  function_definitions
#    
#  * Rev.8: 2020-08-11 (Tue)
#  * Rev.7: 2020-07-27 (Mon)
#  * Rev.6: 2020-07-24 (Fri)
#  * Rev.5: 2020-07-23 (Thu)
#  * Rev.4: 2020-07-21 (Tue)
#  * Rev.3: 2020-07-20 (Mon)
#  * Rev.2: 2020-07-16 (Thu)
#  * Rev.1: 2020-07-15 (Wed)
#  * Draft: 2020-07-14 (Tue)
#
#    To edit this file, use a text editor.
#      $ nano function_definitions

FILE_ENDGING_MESSAGE='../logs/ending_message.txt'

run() {
  COMMAND=$1
  #echo ''
  echo $COMMAND
  eval $COMMAND
}

# Functions used both for master and worker nodes

read_installation_option() {
  while true; do
    read -p 'Install Kubeflow, too? (y/n) ' REPLY
    case $REPLY in
      [Yy]* ) echo 'Kubernetes_and_Kubeflow'; break; ;;
      [Nn]* ) echo 'Kubernetes'; break; ;;  
      * ) echo 'Enter either yes or no.' ;;
    esac
  done
}

read_master_worker_or_test() {
  while true; do
    read -p 'Is this master, worker, or test? (m/w/t) ' REPLY
    case $REPLY in
      [Mm]* ) echo 'master'; break; ;;
      [Ww]* ) echo 'worker'; break; ;;
      [Tt]* ) echo 'test';   break; ;;
      * ) echo 'Enter either m, w, t or master, worker, test.' ;;
    esac
  done
}

deactivate_swap_memory() {
  printf '\n'
  printf 'deactivate_swap_memory ... \n'
  run 'sudo swapoff -a'  # Turn off all swap memory

  printf 'Commenting out the line starting with /swapfile... \n'
  echo "awk '{ if ( \$0 ~ /^\\/swapfile/ ) { printf(\"#%s\n\",\$0); } else { print \$0; } }' /etc/fstab > fstab"
  awk '{ if ( $0 ~ /^\/swapfile/ ) { printf("#%s\n",$0); } else { print $0; } }' /etc/fstab > fstab

  run 'sudo cp /etc/fstab /etc/fstab.backup'
  run 'sudo mv fstab /etc/fstab'

  # On Ubuntu, the last line is commented out to deactivate swap memory.
  run 'tail -n 1 /etc/fstab'
}

get_installed_packages() {
  # To verify if Docker exists or is uninstalled.
  INSTALLED_PACKAGES=`dpkg -l | grep -i docker`
  echo 'INSTALLED_PACKAGES for Docker'
  echo "$INSTALLED_PACKAGES"
}

uninstall_docker() {
  printf '\n'
  printf 'uninstall_docker ... \n'

  # Remove the installed packages
  run 'sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli'
  run 'sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce'

  # Remove the remnants
  run 'sudo rm -rf /var/lib/docker /etc/docker'
  run 'sudo rm /etc/apparmor.d/docker'
  run 'sudo groupdel docker'
  run 'sudo rm -rf /var/run/docker.sock'
}

install_docker() {
  printf '\n'
  printf 'install_docker ... \n'

  # https://docs.docker.com/engine/install/ubuntu/
  # https://kubernetes.io/docs/setup/production-environment/container-runtimes/

  CONTAINERD_VERSION=$1  # 1.2.13-2
  VERSION_STRING=$2      # 5:19.03.11~3-0~ubuntu-$(lsb_release -cs)
  #echo $CONTAINERD_VERSION  # 1.2.13-2
  #echo $VERSION_STRING  # 5:19.03.11~3-0~ubuntu-bionic

  run 'sudo apt-get update'
  #Get:1 https://download.docker.com/linux/ubuntu bionic InRelease [64.4 kB]
  #Err:1 https://download.docker.com/linux/ubuntu bionic InRelease                                     
  #  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY 7EA0A9C3F273FCD8

  run 'sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common gnupg2'
  run 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
  run 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'
  #apt-get update &&  apt-get install -y containerd.io docker-ce docker-ce-cli
  run 'sudo apt-get update'
  run "sudo apt-get install -y docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io=$CONTAINERD_VERSION"

  # Error occured even with the sudo command.
  # bash: /etc/docker/daemon.json: No such file or directory
  # There is no directory /etc/docker.
  # So the command is broken into several parts.
  run 'sudo mkdir /etc/docker'

  # run didn't work properly. So just display the command before running it.
  echo 'cat > daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF'
  cat > daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

  run 'sudo mv daemon.json /etc/docker/daemon.json'
  # Question if the above part is necessary as Docker's installation manual doesn't have this part.
  # https://github.com/kubernetes/kubeadm/issues/1394

  run 'sudo mkdir -p /etc/systemd/system/docker.service.d'
  run 'sudo systemctl daemon-reload'
  run 'sudo systemctl restart docker'
}

configure_docker() {
  printf '\n'
  printf 'configure_docker as the post-installation steps ... \n'

  # Configure Linux / Manage Docker as a non-root user
  run 'sudo groupadd docker'
  run 'sudo usermod -aG docker $USER'

  printf 'Configuring Docker to Start on Boot ...\n'
  run 'sudo systemctl enable docker'

  printf 'If Docker does not start on boot, it may be necessary to \n' >> $FILE_ENDGING_MESSAGE
  printf '  restart the machine for changes to take effect.\n' >> $FILE_ENDGING_MESSAGE
  printf 'Just closing the terminal and re-opening it are not enough. \n' >> $FILE_ENDGING_MESSAGE
}

verify_docker() {
  run 'sudo docker run hello-world'
}

ask_to_reinstall() {
  while true; do
    read -p 'Reinstall Docker? (y/n)' REPLY
    case $REPLY in
      [Yy]* ) break ;;
      [Nn]* ) echo 'Compatible Docker version must be installed. Exiting...'; exit 1; ;;
      * ) echo 'Enter yes or no.' ;;
    esac
  done
}

safe_install_docker4kubernetes() {
  printf '\n'
  printf 'safe_install_docker4kubernetes ... \n'

  # Docker may or may not be installed in the machine.
  # safe_install_docker4kubernetes double-checks to install the most recent version compatible with Kubernetes
  MOST_RECENT_COMPATIBLE_DOCKER_VERSION='19.03.11'

  DOCKER_LOCATION=`which docker`
  if [ -z "$DOCKER_LOCATION" ]; then
    printf '\n'
    printf 'Docker does not exist in this machine.\n'
    DOCKER_VERSION=''
  else
    DOCKER_VERSION=`sudo docker version --format '{{.Server.Version}}'`  #19.03.12
    #DOCKER_VERSION='19.03.12'           # For debugging
  fi

  if [ -z $DOCKER_VERSION ]; then
    install_docker '1.2.13-2' "5:19.03.11~3-0~ubuntu-$(lsb_release -cs)"  #CONTAINERD_VERSION VERSION_STRING
    configure_docker
    verify_docker
  elif [ $DOCKER_VERSION == $MOST_RECENT_COMPATIBLE_DOCKER_VERSION ];then
    printf "The current Docker version ${DOCKER_VERSION} matches the recommended version ${MOST_RECENT_COMPATIBLE_DOCKER_VERSION}. \n"
    printf 'Proceeding to the next step... \n'
  else
    printf "The current Docker version ${DOCKER_VERSION} does not match the recommended version ${MOST_RECENT_COMPATIBLE_DOCKER_VERSION}.\n"
    ask_to_reinstall
    uninstall_docker
    install_docker "1.2.13-2" "5:19.03.11~3-0~ubuntu-$(lsb_release -cs)"  #CONTAINERD_VERSION VERSION_STRING
    configure_docker
    verify_docker
  fi
}

# match_versions_of_docker_kubernetes_kubeflow()
#
# The versions MUST match for kuberflow to work properly.
# https://github.com/aimldl/aimldl.github.io/blob/master/kubeflow/kr/1_environment_setup/match_the_versions_of_docker-kubernetes-kubeflow_chain.md
#
# Summary
#   Kubeflow  Kubernetes  Docker  Memo
#   1.0       1.14        18.09   This works fine.
#   1.0       1.15        18.09   Don't use this because Kubeflow 1.0 fails with Kubernetes 1.15
#                                 (Tested between April, 2020 and July, 2020.)
#
# The supported Docker versions are 1.13.1, 17.03, 17.06, 17.09, 18.06, 18.09
#   both for Kubernetes 1.14 & 1.15.
# Source: https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.14.md#external-dependencies
#         https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.15.md#unchanged
# 
# To install a specific version of Docker, version 18.09 is incomplete information.
#   Both VERSION_STRING & CONTAINERD_VERSION are required. Refer to "install_docker()" for details.
#
# All available VERSION_STRINGs for 18.09 are below.
#   $ apt-cache madison docker-ce |grep "18.09" | awk 'BEGIN { FS="|" } ; { print $2 }'
#    5:18.09.9~3-0~ubuntu-bionic 
#    5:18.09.8~3-0~ubuntu-bionic 
#    5:18.09.7~3-0~ubuntu-bionic 
#    5:18.09.6~3-0~ubuntu-bionic 
#    5:18.09.5~3-0~ubuntu-bionic 
#    5:18.09.4~3-0~ubuntu-bionic 
#    5:18.09.3~3-0~ubuntu-bionic 
#    5:18.09.2~3-0~ubuntu-bionic 
#    5:18.09.1~3-0~ubuntu-bionic 
#    5:18.09.0~3-0~ubuntu-bionic 
#   $
#  Let's select the most recent version 18.09.9.

get_matched_versions_of_docker_kubernetes_kubeflow() {

  # Kubeflow  Kubernetes  Docker    (Docker) VERSION_STRINGs
  # 1.0       1.14        18.09.9   5:18.09.9~3-0~ubuntu-bionic
  MATCHED_VERSIONS="1.0;1.14;18.09.9;5:18.09.9~3-0~ubuntu-bionic"
  printf $MATCHED_VERSIONS
}

install_kubeadm_kubelet_kubectl() {
  printf '\n'
  printf 'install_kubeadm_kubelet_kubectl ... \n'

  run 'sudo apt-get update && sudo apt-get install -y apt-transport-https curl'
  run 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -'
  
  # Diplay the command before running it because run 'cat <<EOF ... didn't work properly. 
  echo 'cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF'
cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
  run 'sudo apt update'
  run 'sudo apt install -y kubelet kubeadm kubectl'
  run 'sudo apt-mark hold kubelet kubeadm kubectl'
}

install_common_parts() {  # used both for master and worker ndoes
  INSTALL_OPTION=$1
  printf "install_common_parts for $INSTALL_OPTION ...\n"

  deactivate_swap_memory

  if [ $INSTALL_OPTION == 'Kubernetes' ]; then
    safe_install_docker4kubernetes
  elif [ $INSTALL_OPTION == 'Kubernetes_and_Kubeflow' ]; then
    VERSIONS=`get_matched_versions_of_docker_kubernetes_kubeflow`
    KUBEFLOW_VERSION=`echo $VERSIONS | awk 'BEGIN { FS=";" } { print $1; }'`        # 1.0
    KUBERNETES_VERSION=`echo $VERSIONS | awk 'BEGIN { FS=";" } { print $2; }'`      # 1.14
    DOCKER_VERSION=`echo $VERSIONS | awk 'BEGIN { FS=";" } { print $3; }'`          # 18.09.9
    DOCKER_VERSION_STRING=`echo $VERSIONS | awk 'BEGIN { FS=";" } { print $4; }'`  # 5:18.09.9~3-0~ubuntu-bionic

    #echo $VERSIONS
    #echo $KUBEFLOW_VERSION
    #echo $KUBERNETES_VERSION
    #echo $DOCKER_VERSION
    #echo $DOCKER_VERSION_STRING

    # CONTAINERD_VERSION is fixed to 1.2.13-2 because I didn't see any
    install_docker '1.2.13-2' $DOCKER_VERSION_STRING
  fi

  install_kubeadm_kubelet_kubectl
}

# Functions used only for the master 
setup_master() {
  printf '\n'
  printf 'Setting up a master (control-plane node) ...\n'

  #sudo kubeadm init
  run 'sudo kubeadm init > ../logs/sudo_kubeadm_init.log'

  run 'mkdir -p $HOME/.kube'
  run 'sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config'
  run 'sudo chown $(id -u):$(id -g) $HOME/.kube/config'

  run 'sudo kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml'
}

get_nodes() {
  run 'kubectl get nodes'
  # Don't be surprised if STATUS is NotReady right after the installation. It's expected!
  #   NAME                            STATUS     ROLES    AGE   VERSION
  #   k8smaster-alienware-aurora-r6   NotReady   master   5s    v1.18.6
  # STATUS will become Ready as the requirements are installed one after another.
}

extract_command2join_worker_nodes() {
  INPUT_FILE=$1
  OUTPUT_FILE=$2

  printf '\n'
  printf "extract_command2join_worker_nodes from $INPUT_FILE ...\n"

  # An error will occur without sudo.
  #   [ERROR IsPriviledgeUser]: user is not running as root

  printf 'sudo '
  printf 'sudo ' > $OUTPUT_FILE

  echo "cat $INPUT_FILE | grep '^kubeadm join.*--token' >> $OUTPUT_FILE"
  cat $INPUT_FILE | grep "^kubeadm join.*--token" >> $OUTPUT_FILE

  echo "cat $INPUT_FILE | grep '^    --discovery-token-ca-cert-hash' >> $OUTPUT_FILE"
  cat $INPUT_FILE | grep '^    --discovery-token-ca-cert-hash' >> $OUTPUT_FILE

  run "cat $OUTPUT_FILE"
  #kubeadm join <control-plane-host>:<control-plane-port> --token <token> \
  #    --discovery-token-ca-cert-hash sha256:<hash>
  printf "The command is temporarilly saved to $OUTPUT_FILE.\n"

}

safe_append() {
  INPUT_FILE=$1
  OUTPUT_FILE=$2
  echo "safe_append $INPUT_FILE to $OUTPUT_FILE ..."

  if test -f $INPUT_FILE; then
    cat $INPUT_FILE >> $OUTPUT_FILE
  else
    echo "File is missing: ${INPUT_FILE}"
    echo 'Exiting ...'
    exit 1
  fi
}

generate_commands4worker() {
  printf '\n'
  printf 'generate_commands4worker ... \n'

  FILE_INPUT=$1
  FILE_OUTPUT='commands4worker'

  printf '# Automatically generated when the master is installed and configured. \n' > $FILE_OUTPUT
  printf 'install_common_parts $INSTALL_OPTION \n' >> $FILE_OUTPUT
  safe_append $FILE_INPUT $FILE_OUTPUT
}

get_token() {
  # Run this function only on the master.

  SECRET_NAME=`kubectl -n kube-system get secret -n kube-system -o name | grep namespace`
  TOKEN=`kubectl -n kube-system describe $SECRET_NAME | grep ^token | sed -e 's/^token:[ ]*//'`
  echo $TOKEN
}
# EOF

# deploy_k8s_dashboard
# https://github.com/aimldl/aimldl.github.io/blob/17bb808624033e1f1de1838a42fc90efd8ab08b6/kubeflow/kr/1_environment_setup/deploy_k8s_dashboard.md

deploy_k8s_dashboard() {
  printf '\n'
  printf 'deploy_k8s_dashboard ... \n'

  OUTPUT_FILE_K8S_DASHBOARD='../logs/k8s_dashboard_token.txt'
  run 'sudo kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml'
  TOKEN=`get_token`
  #printf $TOKEN

  # Output
  printf '\n' >> $FILE_ENDGING_MESSAGE
  printf 'To run the Kubernetes dashboard, run

  $ kubectl proxy

  and enter the following address to the address bar of a web browser:\n
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login\n' >> $FILE_ENDGING_MESSAGE
  STRING="test"
#The token to access Kubernetes dashboard is saved to $OUTPUT_FILE_K8S_DASHBOARD ... \n
  printf "$STRING" >> $FILE_ENDGING_MESSAGE

  printf $TOKEN > $OUTPUT_FILE_K8S_DASHBOARD
}

# EOF
