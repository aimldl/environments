# mcsrn_wt_idr_2x2.cfg
#
# Modified CSRN with input dimension reduction for a 2x2 board.
# The multivalued function is transformed into a single-valued function.
#
# Last updated: Oct. 10, 2010 (Sun)
# First written: May 25, 2009 (Mon)
#
# No space is allowed in variable name
# Note: Do not use ";" at the end of the line.
#   Correct usage:
#     simul_task_id = 2
#     pso_local_best_initial_value = inf
#   Wrong usage:
#     simul_task_id = 2;
#     pso_local_best_initial_value = inf;
#
# Refer to the manual for details.
################################################################################
#                            ConfigDirStruct                                   #
################################################################################
# The default directory structure is set in the source code.
# Class ConfigDirStruct provides flexibility to change the directory names.
# Ensure the directory names below match those in the program root directory.
# Note directory for a config file should be hard-coded in the source code;
# Otherwise, a config file itself cannot be read.

dir_gnuplot_config_files  = ../gnuplot_config_files
dir_outputs               = ../outputs
traceFile = mcsrn_2x2-1_6_8-30.0.trc

################################################################################
#                           ConfigSimulations                                  #
################################################################################
# This class configures the type of simulations necessary to determine the input
# data type and so on. One thing to note is the simulation trace.
# The simulation trace shows some useful information about the loops during
# a simulation. The trace file, e.g. default.out, is designed to be
# postprocessed to plot a learning curve. When the trace is turned on, all the 
# logging information will be turned off.
#
# simul_task_type: cmlp_string_count
# simul_architecture: cmlp, cpsrn, csrn
# simul_data_type: single_valued_function, multi_valued_function

#simul_task_type           = string_count_problem
simul_task_type           = learn_optimal_moves
#simul_architecture        = cmlp
#simul_architecture        = cpsrn
#simul_architecture        = csrn
simul_architecture        = mcsrn
#simul_data_type           = single_valued_function
#simul_data_type           = multi_valued_function
simul_data_type           = board_status_sequences
simul_functionize_inputs  = off
simul_boardSize           = 2
simul_trace_all           = 0
simul_trace_on            = 1
simul_postprocess         = 0
simul_show_progress_bar   = 1

################################################################################
#                               ConfigLog                                      #
################################################################################
# Trace preceeds Log. When trace is turned on, all the logs are disabled.
#
# Turn on log_trainWtPso to see the learning results for the outer loop.
# Turn on log_useMlpAndPsoToTrainInBatch to see the learning results 
#   for the inner loop.

log_data                       = 0
log_function_call              = 0
log_system_errors              = 1
log_cell_errors                = 0
log_cell                       = 0
log_comment                    = 0
log_neuron                     = 0
log_pso                        = 0
log_neural_networks            = 0
#log_neuron_compute             = 0

log_interfaceWeightsToNeurons  = 0

log_trainWtPso                 = 0
log_computeMlpOutputInBatch    = 0
log_computeMlpOutput           = 0
log_doLinearCombinationWtBias  = 0
log_trainInBatchMode           = 0

#Pso.cpp
log_pso_evaluate               = 0
log_updateLocalBests           = 0
log_updateGlobalBest           = 0
log_pso_update                 = 0

# Cell.cpp
log_feedback_input             = 0

################################################################################
#                               ConfigCnn                                      #
################################################################################
#
# cnn_fd_input_initialization is for a cell structure with feedback inputs.
#   In other words, CMLP does not use this parameter.
#   Possible options are
#
#     cnn_fd_input_initialization: zero, random, target,rand_ternary
#
#   zeros is not much different from random because the feedback input values
#     will be replaced by more or like a random number in one internal loop.
#     Why? The neural networks weights are randomized, which affects the initial
#     neural networks output.
#   target is to set the initial values to the target values.
#     This enables to test if the given neural networks architecture remains
#     stable after convergence.
#
# cnn_output_data_type is the date type for cell outputs.
#   Possible options are
#
#     cnn_output_data_type: int, unsiged int, double
#
#   int: -1, 0, 1
#   unsigned int: 0, 1, 2 (Ternary)
#   double: floating point output. 
#           The output activataion function is either tansig or log sig.
#
# cnn_error_metric
#   mse           Mean Square Error MSE
#   abs_error     Difference between the target and output Error=abs(Target-Estimate)
#
# cnn_target_system_error is the target system error for the outer loop in Cnn.
#   cnn_target_system_error==> targetSystemError_
#
# cnn_target_cell_error is the target cell error for the inner loop in Cell.
#   cnn_target_cell_error==> targetCellError_

cnn_max_epoch_o = 100
cnn_target_system_error = 0
cnn_target_cell_error         = 0.0;
cnn_fd_input_initialization   = rand_ternary
cnn_output_data_type          = int
cnn_error_metric              = abs_error

################################################################################
#                          ConfigNeuralNetworks                                #
################################################################################
# "neuralnets_number_of_neurons_in_layers = 6:1"
#   means N input layer nodes, 6 hidden layer neurons, and 1 output neuron.
#
# "neuralnets_number_of_nodes_in_layers = 1:6:1" is no longer in use because
# the number of input layer nodes may vary in the CNN architecture.
#
# Note number of neurons are different from number of nodes.
# The former does not include the size of the input layer.
#
# Do not worry about the input size because it will be determined by other
# factors such as the board size and a cell structure, e.g. MLP or SRN.
#
# neuralnets_activation_function
#   =   output layer activation fn    activation fn for the rest of them
#   1            linear                           tansig
#   2            linear                           logsig
#   3            tansig                           tansig
#   4            logsig                           logsig
#   5            floor                            tansig 
#   6            ternary_step                     tansig
#   7            ternary_step                     logsig
#
# Note the output value of tansig ranges from -1 to 1 while that of logsig is [0,1].
#
# Usage examples:
#   "neuralnets_number_of_neurons_in_layers" and"neuralnets_number_of_hidden_layers"
# 
#   neuralnets_number_of_neurons_in_layers = 6:1
#   neuralnets_number_of_hidden_layers = 1
#
#   neuralnets_number_of_neurons_in_layers = 6:3:1
#   neuralnets_number_of_hidden_layers = 2

#neuralnets_number_of_neurons_in_layers = 15:3:1
neuralnets_number_of_neurons_in_layers = 8:1
#neuralnets_number_of_nodes_in_layers = 1:2:1 # Now this is obsolete.
neuralnets_activation_function = 6
neuralnets_slope_param_logsig = 1.0
neuralnets_slope_param_tansig = 1.0
neuralnets_number_of_hidden_layers = 1
neuralnets_ternary_step_function_c = 30.0
neuralnets_ternary_step_function_w = 80.0
#neuralnets_ternary_step_function_c = 10.0
#neuralnets_ternary_step_function_w = 10.0

################################################################################
#                               ConfigPso                                      #
################################################################################
# Note PSO trains each cell.
#
#
# Be careful not to set "pso_number_of_particles=1".
# When the initial velocity is set to zero, the velocity will be frozen to zero
# all the time because the globally best particle stops moving around.
#
# Initial values: pso_*_initial_value
#   Don't set the initial value for localBest_[ i ] to infinity.
#   It will end up setting velocity V_[i] to zero all the time.
#   Also, don't set the initial V_[i] to zero. It will also freeze a particle
#   to zero. If you don't like a large value, pick a small value around zero.
#
# pso_target_errors is equal to the target cell error.

pso_max_epochs_i = 10
pso_number_of_particles       = 10
#pso_target_errors             = 0.0 # This should be obsolete.
#pso_w                         = 0.95
pso_w = 0.5
pso_c1 = 2
pso_c2 = 2
pso_v_max = 10
pso_x_min = -10
pso_x_max = 10
#pso_v_max                     = 1.0
#pso_x_min                     = 0.0
#pso_x_max                     = 2.0
pso_v_initial_value           = 0.000000000000001
pso_local_best_initial_value  = inf
pso_global_best_initial_value = inf

################################################################################
#                             ConfigGnuPlot                                    #
################################################################################
# Make sure gnuplot_output_file_name matches the file name in 
# gnuplot_config_file_name.
# Set "gnuplot_run" to 1 to run gnuplot automatically after a simulation.
#   Set it to 0 not to run it.
# gnuplot_input_file_name is a text file with data to plot. 
#   Use .dat for extension.
# gnuplot_config_file_name has an extension .gp, meaning g(nu)p(lot).
# gnuplot_output_file_name has an extension .ps, p(ost)s(cript).

gnuplot_run               = 0
gnuplot_input_file_name   = gnuplot_test_input.dat
#gnuplot_config_file_name  = gnuplot_default_config.gp
gnuplot_config_file_name  = gnuplot_test.gp
gnuplot_output_file_name  = gnuplot_test_output.ps
gnuplot_range_x_from      = -3.0
gnuplot_range_x_to        =  3.0
gnuplot_range_x_increment =  0.5
gnuplot_title             =  my_first_plot

################################################################################
#                               ConfigData                                     #
################################################################################
# About input, output, target data
# test_problem-1:
#   x = [-1.0:0.1:1.0], y = 2.0*x^2-1.0;
# Note for "y = 2.0*x^2+1.0;", there is no way for NNs output to reach y=3.0
# because y_hat is bound to [-1.0, 1.0].
#
#data_input_config         = 2:2:16
#data_input_config         = 2:2:7
# Currently, this is not neccessary.
