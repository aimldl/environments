README for template.cfg

################################################################################
#                            ConfigDirStruct                                   #
################################################################################
# The default directory structure is set in the source code.
# Class ConfigDirStruct provides flexibility to change the directory names.
# Ensure the directory names below match those in the program root directory.
# Note directory for a config file should be hard-coded in the source code;
# Otherwise, a config file itself cannot be read.

################################################################################
#                           ConfigSimulations                                  #
################################################################################
# This class configures the type of simulations necessary to determine the input
# data type and so on. One thing to note is the simulation trace.
# The simulation trace shows some useful information about the loops during
# a simulation. The trace file, e.g. default.out, is designed to be
# postprocessed to plot a learning curve. When the trace is turned on, all the 
# logging information will be turned off.
#
# simul_task_type: cmlp_string_count
# simul_architecture: cmlp, cpsrn, csrn
# simul_data_type: single_valued_function, multi_valued_function

################################################################################
#                               ConfigLog                                      #
################################################################################
# Trace preceeds Log. When trace is turned on, all the logs are disabled.
#
# Simulation log of some debugging information to an output file.
# The default output file is default.out.
# A simulation log is turned on only when the simulation trace is switched off.
# The purpose of a log file is to log some debugging information.
# On the other hand, the trace file records the simulation results which
# will be postprocessed. 
#
# Switching on a simulation log is a three-step process.
#
# Step 1:
#   Before turning on the simulation logs, define OPT_LOG_SIMULATION in 
#   MyDefinitions.hpp to 1. In other words,
#
#      #define OPT_LOG_SIMULATION 1
#
# Step 2:
#   Compile the simulator. Doing so adds a chunk of lines to log the simulation.
#   On the other hand, setting OPT_LOG_SIMULATION to 0, i.e.
#
#      #define OPT_LOG_SIMULATION 0
#
#   , and recompiling the simulator removes the added overhead. Doing so enables
#   the simulator to run faster. Additionally, it reduces the executable size.
#
# Step 3:
#   Set the following logging options to 1. For example, set log_data to 1.
#
# Turn on log_trainWtPso to see the learning results for the outer loop.
# Turn on log_useMlpAndPsoToTrainInBatch to see the learning results 
#   for the inner loop.

################################################################################
#                               ConfigCnn                                      #
################################################################################
#
# cnn_fd_input_initialization is for a cell structure with feedback inputs.
#   In other words, CMLP does not use this parameter.
#   Possible options are
#
#     cnn_fd_input_initialization: zero, random, target
#
#   zeros is not much different from random because the feedback input values
#     will be replaced by more or like a random number in one internal loop.
#     Why? The neural networks weights are randomized, which affects the initial
#     neural networks output.
#   target is to set the initial values to the target values.
#     This enables to test if the given neural networks architecture remains
#     stable after convergence.

################################################################################
#                          ConfigNeuralNetworks                                #
################################################################################
# "neuralnets_number_of_neurons_in_layers = 6:1"
#   means N input layer nodes, 6 hidden layer neurons, and 1 output neuron.
#
# "neuralnets_number_of_nodes_in_layers = 1:6:1" is no longer in use because
# the number of input layer nodes may vary in the CNN architecture.
#
# Note number of neurons are different from number of nodes.
# The former does not include the size of the input layer.
#
# Do not worry about the input size because it will be determined by other
# factors such as the board size and a cell structure, e.g. MLP or SRN.
#
# neuralnets_activation_function
#   =   output layer activation fn    activation fn for the rest of them
#   1            linear                           tansig
#   2            linear                           logsig
#   3            tansig                           tansig
#   4            logsig                           logsig
#   5            floor                            tansig 
#
#neuralnets_number_of_nodes_in_layers = 1:2:1 # Now this is obsolete.

################################################################################
#                               ConfigPso                                      #
################################################################################
# Be careful not to set up "pso_number_of_particles=1".
# When the initial velocity is set to zero, the velocity will be frozen to zero
# all the time because the globally best particle stops moving around.
#
# Initial values: pso_*_initial_value
#   Don't set the initial value for localBest_[ i ] to infinity.
#   It will end up setting velocity V_[i] to zero all the time.
#   Also, don't set the initial V_[i] to zero. It will also freeze a particle
#   to zero. If you don't like a large value, pick a small value around zero.
#
# pso_target_errors is equal to the target cell error.

################################################################################
#                             ConfigGnuPlot                                    #
################################################################################
# Make sure gnuplot_output_file_name matches the file name in 
# gnuplot_config_file_name.
# Set "gnuplot_run" to 1 to run gnuplot automatically after a simulation.
#   Set it to 0 not to run it.
# gnuplot_input_file_name is a text file with data to plot. 
#   Use .dat for extension.
# gnuplot_config_file_name has an extension .gp, meaning g(nu)p(lot).
# gnuplot_output_file_name has an extension .ps, p(ost)s(cript).

################################################################################
#                               ConfigData                                     #
################################################################################
# About input, output, target data
# test_problem-1:
#   x = [-1.0:0.1:1.0], y = 2.0*x^2-1.0;
# Note for "y = 2.0*x^2+1.0;", there is no way for NNs output to reach y=3.0
# because y_hat is bound to [-1.0, 1.0].
#
#data_input_config         = 2:2:16
#data_input_config         = 2:2:7
# Currently, this is not neccessary.
