#!/bin/bash
# postproc_nns
#
# Last modified: Mar. 10, 201 (Thu)
# First written: Jul. 21, 2009 (Tue)
# Written by Tae-Hyung "T" Kim, mrtonnet [at] gmail [dot] com
# Copyright 2009. All rights reserved.
#
# To learn about this bash script, refer to "showUsage" below.
#
# Version information:
#   Version 0.4: code is polisehd to work together with nns.
#   Version 0.3: both nns.bash and nns.exe can be used.
#   Version 0.2: postprocess a 2x2 CPSRN output
#   Version 0.1: postprocess a 2x2 CSRN output
#   Version 0.0: postprocess a 2x2 CMLP output

################################################################################
#                   Options and Configuration                                  #
################################################################################
#####################################
# Default options and configuration #
#####################################
# PLEASE DO NOT CHANGE THIS!
VERSION="1.0";
VER_RELEASED="Mar. 19, 2011 (Sat)";
OPT_OPTION=0;
OPT_SILENTMODE=0;
OPT_EMAIL=0;

#####################################
#        Directory Structure        #
#####################################
DIR_ROOT=~+;  # Same as `pwd`
DIR_OUTPUTS="outputs";
DIR_SCRIPTS="bash_scripts";

DIR_MODULE=${DIR_ROOT}/${DIR_SCRIPTS};

#DIR_OUTPUT="../outputs";
DIR_DEFAULT=".";

#####################################
#              Files                #
#####################################
FILE_OUTPUT_DEFAULT="default.trc";
FILE_FULLLIST="full.list";
FILE_SIMPLELIST="simple.list";
FILE_ERROR_PROFILE=error.prf;
COMMAND_NAME="postproc_nns";

#####################################
#               Time                #
#####################################
TIME_START=`date +"%X, %F";`;
TODAY=`date +"%F";`;
# PLEASE DO NOT CHANGE THIS!

#####################################
#  Strings to send an email notice  #
#####################################

# CHANGE THIS PART AT YOUR OWN RISK TO CUSTOMIZE THIS PROGRAM.
EMAIL_RECIPIENTS="user_name@gmail.com";  # The email recipient should be hardcoded here.
# CHANGE THIS PART AT YOUR OWN RISK TO CUSTOMIZE THIS PROGRAM.

################################################################################
#                                Procedures                                    #
################################################################################
# This is part is solely for option -o
showShortUsage() {
echo "Usage: ${COMMAND_NAME} file_to_process [option]
  This script should ALWAYS be run in the project directory.
Shell options:
  -o   options
Examples:
  ./${COMMAND_NAME} -o 0
Values before/after the options are set:
  -o   OPT_OPTION=-1;   OPT_OPTION=n; n is an integer taken from the input argument.
Type \`${COMMAND_NAME} -h\` for more help.";
}

showUsage()
{
echo "
${COMMAND_NAME} is designed to postprocess trace files created by running
nns-1.2.exe or nns.bash, which executes nns-1.2 in the bash script.

nns (Neural Networks Simulator) is written to simulate CSRN (Cellular
Simultaneous Recurrent Network), a variant of neural networks in
cellular structure.

Currently, the CSRN is trained with PSO (Particle Swarm Optimization).
The training data is a Go board or the board representation in computer Go.

Input: a single output file in the Neural Networks Simulator Format (*.out)
Output: postprocessed files
Usage: ${COMMAND_NAME} [target_output_directory] [option]

A chunk of lines in all 'error.prf's in all the sub-directories of a target output
directory or 'target_output_directory' are collected and stored in a single file.
In each sub-directory, there exists a trace file for the error profile or 'error.prf'.
A command extracts several lines on the first and last lines from 'error.prf'.

Example:
  $ ./${COMMAND_NAME}
  $ ./${COMMAND_NAME} -o 2
  $ ./${COMMAND_NAME} -d ~/2008-2010.nns/nns-1.2/outputs/temp/2011-03-10_2x2_white
  $ ./${COMMAND_NAME} -d ~/2008-2010.nns/nns-1.2/outputs/temp/2011-03-10_2x2_white -o 2

The first example is the default command.
  By default, the target output directory is a directory under directory 'outputs'
  named with the date when the simulation is run.

The second example is the default command with option 2.
  The target output directory is identical to the first example. The option is user-
  specific. The user can write a code and add it to the part for option 2.

The third example is another frequently used command.
  This command provides more flexibility to the user because one can specify the target
  output directory. This command is especially useful when the user changed a directory
  name or when a target output directory is moved/archived into a directory other than
  directory 'outputs'.

The fours example is identical to the third example except the option is specified.

Shell options:
   -h   help. Type \`${COMMAND_NAME} -h\` for help.
   -d   target output directory.
   -e   email when the job is done.
        Command 'mail' should be properly configured in advance to use this feature.
        Talk to your system administrator to configure 'mail'. EMAIL_RECIPIENTS is hardcoded.
        Change variable EMAIL_RECIPIENTS in this file if neccessary.
   -o   options
   -s   silent mode
   -v   version information

Values before/after the options are set:
   -e   OPT_EMAIL=0;           OPT_EMAIL=1;
   -o   OPT_OPTION=-1;         OPT_OPTION=n; n is an integer taken from the input argument.
   -s   OPT_SILENTMODE=0;      OPT_SILENTMODE=1;

Examples:
   ${COMMAND_NAME} example.out

Bug report: Please report bugs at mrtonnet [at] gmail [dot] com.";
}

show_version_info()
{
   echo "  ${COMMAND_NAME} version ${VERSION}, ${VER_RELEASED}. ";
}

safe_rm() {
# If the file exist, ask before deleting it.
# Otherwise, do nothing.
# Usage:
#   safe_rm filename
# Example:
#   safe_rm ${FILE2DELETE}

  FILENAME=$1;
  if test -f ${FILENAME}; then
    echo "Delete the existing file ${FILENAME}?";
    read;
    if [ ${REPLY} == "y" -o  ${REPLY} == "Y" ];then
      rm ${FILENAME};
    elif [ ${REPLY} == "n" -o  ${REPLY} == "N" ];then
      echo "Exiting...";
      exit 1;
    else
      echo "Wrong input. Type in either y or n. Exiting...";
      exit 1;
    fi
  fi
}

################################################################################
#                          Command line arguments                              #
################################################################################
MIN_NUM_OF_ARGS=0;
if [ $# -lt ${MIN_NUM_OF_ARGS} ];then
   showUsage;
   exit 1;
fi

DIR_TARGETOUTPUT="${DIR_ROOT}/${DIR_OUTPUTS}/${TODAY}";

################################################################################
#                           Command line options                               #
################################################################################
COMMAND_LINE_OPTS=":d:heo:sv";

while getopts ${COMMAND_LINE_OPTS} Option; do
   case ${Option} in
      d ) DIR_TARGETOUTPUT=${OPTARG}; ;;
      h ) showUsage; exit 1; ;;
      e ) OPT_EMAIL=1;
          echo -e "\033[36mWhen the job's done, an email will be sent to ${EMAIL_RECIPIENTS}.\033[0m";
          ;;
      o ) OPT_OPTION=${OPTARG}; ;;
      s ) OPT_SILENTMODE=1; ;;
      v ) show_version_info; exit 1; ;;
      * ) echo "Unknown command line option."; # -${Option}.";
      	  echo "Type \`${COMMAND_NAME} -h\` for help.";
      	  exit 1;
      	;;
   esac
done
shift $((${OPTIND} -1))

################################################################################
#                                Main                                          #
################################################################################
if [ ${OPT_SILENTMODE} -eq 0 ]; then
  echo -e "\033[36mStart of the program: ${TIME_START}\033[0m";
fi

#####################################
#              Options              #
#####################################
# One can specify the option number in the input argument with option -i in
# order to associate a group of options.

if [ ${OPT_OPTION} -eq 0 ]; then
  # Assumption 1.
  #   The output is processed on the same day for this option.
  # Assumption 2.
  #   All the sub-directories of the target output directory have 'error.prf'.

  if test ! -d ${DIR_TARGETOUTPUT}; then
    echo "${DIR_TARGETOUTPUT} doesn't exist. Exiting...";
    exit 1;
  else
    cd ${DIR_TARGETOUTPUT};
    safe_rm ${FILE_SIMPLELIST};
    safe_rm ${FILE_FULLLIST};
    echo "Extracting the error profile from sub-directories of ${DIR_TARGETOUTPUT}...";
    for dir_name in `ls`; do
      # Simple list
      echo ${dir_name} >> ${FILE_SIMPLELIST};
      head -n 6 ${dir_name}/${FILE_ERROR_PROFILE} >> ${FILE_SIMPLELIST};
      tail -n 1 ${dir_name}/${FILE_ERROR_PROFILE} >> ${FILE_SIMPLELIST};
      echo "">> ${FILE_SIMPLELIST};

      # Full list
      echo ${dir_name} >> ${FILE_FULLLIST};
      head ${dir_name}/${FILE_ERROR_PROFILE} >> ${FILE_FULLLIST};
      tail ${dir_name}/${FILE_ERROR_PROFILE} >> ${FILE_FULLLIST};
      echo "">> ${FILE_FULLLIST};
    done
    echo "Opening files with collected error profiles...";
    gedit ${DIR_TARGETOUTPUT}/${FILE_SIMPLELIST};
    gedit ${DIR_TARGETOUTPUT}/${FILE_FULLLIST};
  fi
elif [ ${OPT_OPTION} -eq 1 ]; then
  # This option is identical to option 0 except this option shows an example
  # how to source an external file.
  source ${DIR_MODULE}/modules4postproc_nns-error_profile.bash;
else
  # CHANGE THIS PART AT YOUR OWN RISK TO CUSTOMIZE THIS PROGRAM.
  source ${DIR_MODULE}/module4postproc_nns-old_code.bash;
  # CHANGE THIS PART AT YOUR OWN RISK TO CUSTOMIZE THIS PROGRAM.
fi

if [ ${OPT_SILENTMODE} -eq 0 ]; then
  # I think it's better to display the end of the simulation even for the dummy command mode.
  TIME_FINISH=`date +"%X, %F";`;
  echo -e "\033[36mEnd of ${COMMAND_NAME}: ${TIME_FINISH}\033[0m";
fi
################################################################################

################################################################################
#                     mail the status report to the user                       #
################################################################################
# Send an email to notify the end of simulation with command "mail"
# The following terminal command sends an email with title "hello, T" and body
# "This is the mail body." to a mail recipient "mrtonnet@gmail.com".
# Test this command in the linux machine to see if the machine is configured to
# send an email. Hit enter after typing in the command
#
#   $ echo "This is the mail body." | mail -s "hello, T" mrtonnet@gmail.com
#   $

if [ ${OPT_EMAIL} -eq 1 ];then
  MAIL_TITLE="${COMMAND_NAME}. Job done.";
  MAIL_MESSAGE="TIME_START=${TIME_START}. TIME_FINISH=${TIME_FINISH}.";

  if [ ${OPT_SILENTMODE} -eq 0 ]; then
    echo -e "\033[36mSending an email notice to ${EMAIL_RECIPIENTS}...\033[0m";
  fi
  echo ${MAIL_MESSAGE} | mail -s "${MAIL_TITLE}" ${EMAIL_RECIPIENTS};
fi

################################################################################
exit 0;
#EOF
