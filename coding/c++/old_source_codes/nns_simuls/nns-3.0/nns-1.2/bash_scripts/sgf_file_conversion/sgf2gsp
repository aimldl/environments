#!/bin/bash
# sgf2gsp      	is a Bash script converting a "single" SGF file to a corresponding GSP file.
#		A SGF file is a file in the "de factor" standard format of Smart Game Format.
#               GSP stands for Go Stone Positions.
#               It is our custom format that extracts stone positions from a SGF file.
#		GSP is designed to interface C++.
#
#		In essence, this program operates as follows.
#
#			extr_moves ${sgf_file} > ${gsp_file};
#
#               That is, extract moves from a a SGF file (text file)
#               and then save those extracted moves to a GSP file (text file).
#
#               The rest of parts in sgf2gsp provide additional functionalities such as:
#               (1) interfacing different structures of SGF files in different database servers,
#               (2) identify & reformat the different input/output formats,
#               (3) and so on.
#
#	input:  a SGF file (*.sgf)
#		Tested on several different database servers structured in different ways.
#		Procedure id_sgf_struct identifies if the structure is matrix, column vector, or row vector.
#	output:
#		a GSP file (*.sgf) in three different formats: 
#		matrix, column vector, and row vector.
#               
#               The default output format is a numeric column vector. 
#               
#	Usage: 
#		Refer to the usage/help by typing "./sgf2gsp -h"
#
# sgfc		is a program developped by Arno Hollosi which checks the SGF syntax.
#		sgfc can be run with the -c option in sgf2gsp.
#
# Last updated:  Oct.14, 2008 (Tue)
# First written: Jan.21, 2008 (Mon)
# Written by Tae-Hyung D. Kim, tk424@mst.edu
#
# Version: 1.4
#    Technically, sgf2gsp is version 1.4 of sgf2nif.
#    The formats used before version 1.3 is obsolete.
#    From version 1.3, the SGF file in either matrix or column vector is not important.
#    Convert all of them to a column vector, and then process the SGF file.
#    In this sense, this program can be made concise and this should be rewritten.
#    Refer to sgf2aif.
# Programming background
#    Bash scripting, awk scripting, & Perl scripting are used in this Bash script.
#    Basic understanding of sed is required, too.
# Todo
#    Modify conv_sgf2nif to conv_sgf2gsp
#    The output of the numeric option -n is not satisfying. It has bugs, too.

##################################################################################
#                 	Options and Configuration				 #
##################################################################################

#####################################
# Default options and configuration #
#####################################
# PLEASE DO NOT CHANGE THESE VALUES!
VERSION="1.4";
VER_RELEASED="Oct.7, 2008 (Tue)";

OPT_DISPLAY4DEBUG=0;
OPT_SGFSTRUCTURE=0;
OPT_SGFC=0;
OPT_SILENTMODE=0;
OPT_DIPLAYOUTPUT=0;
OPT_OUTPUTFORMAT=0;
OPT_INDEX=0;
OPT_STRINGOUTPUT=0;
OPT_LOC4MATLAB=0;		# location for Matlab
OPT_LOG=0;
FILE_LOG="sgf2gsp.log";
# PLEASE DO NOT CHANGE THESE VALUES!

##################################################################################
#                                Procedures                                      #
##################################################################################

show_shortusage_sgf2gsp() {
echo "
   Usage: sgf2gsp [option] file_sgf [file_gsp]
   Input: a single file in the Smart Game Format (*.sgf)
   Output: a single file in the Go Stone Positions format (*.gsp)

   Type \`sgf2gsp -h\` for help. 
";
}

show_usage_sgf2gsp() {
echo "
sgf2gsp converts a "single" SGF file to a corresponding GSP file. It extracts positional information on Go stones from the SGF file and reformats the positional information into the GSP file while information other than positions is excluded. SGF stands for Smart Game Format and GSP is Go Stone Positions. Note a SGF file is nothing but a text file containing game trees or moves in a game with other information about the game such as players, places, and so on. 

sgf2gsp is a useful tool when SGF files are loaded by other programs such as C++ and MATLAB.
Note the output format is a text file with coordinates of moves in a game.

sgf2gsp can be executed either standalone or via conv_sgf2gsp. conv_sgf2gsp is a wrapper around sgf2gsp to convert all SGF files in a single directory.

Usage: sgf2gsp [option] file_sgf [file_gsp]
Input: a single file in the Smart Game Format (*.sgf)
Output: a single file in the Go Stone Positions format (*.gsp)

Shell options:
   -h   Display help. Type \`sgf2gsp -h\` for help.
   -c   Check the SGF syntax with sgfc by Arno Hollosi.
   -d   Diplay the output file
   -D   Debug display mode. Some internal variables are displayed.
   -f   Configure the output format: 
           0 (n-by-1 column vector), 1 (m-by-10 matrix), 2 (1-by-n row vector)
   -i	Index moves
   -l   Log the activities.
   -m   Stone positions for "M"atlab.
        The default position for a move is designed for C++ and it starts from (0,0).
        This is because an array index in C/C++ starts from 0.
        With option -m, the position starts from (1,1) designed for Matlab.
   -s   Run sgf2gsp with a silent mode. (Used by conv_sgf2gsp)
   -S   String output. Positions are represented in alphabets, not in numbers.
   -v   Display the version information.
Examples:
   sgf2gsp input_file.sgf
   sgf2gsp input_file.sgf output_file.gsp
   sgf2gsp -s input_file.sgf output_file.gsp
Values before/after the options are set:
   Option   Before                After
   -c       OPT_SGFC=0;           OPT_SGFC=1;
   -d       OPT_DIPLAYOUTPUT=0;   OPT_DIPLAYOUTPUT=1;
   -D       OPT_DISPLAY4DEBUG=0;  OPT_DISPLAY4DEBUG=1;
   -f       OPT_OUTPUTFORMAT=0;   OPT_OUTPUTFORMAT=${OPTARG}
   -i	    OPT_INDEX=0;	  OPT_INDEX=1;
   -l       OPT_LOG=0;            OPT_LOG=1;
   -M       OPT_LOC4MATLAB=0;     OPT_LOC4MATLAB=1;
   -s       OPT_SILENTMODE=0;     OPT_SILENTMODE=1;
   -S       OPT_STRINGOUTPUT=0;   OPT_STRINGOUTPUT=1;

Caution:
   When a new output format is necessary, make sure to delete the GSP file generated earlier.
   If there exists a GSP file (with the same name) generated earlier AND the new GSP file was not generated somehow, 
   the -d option will keep showing the earlier GSP file.
   
Bug report: Please report bugs at mrtonnet [at] gmail [dot] com.";
}

show_version_info() {
   echo "   sgf2gsp version ${VERSION}, ${VER_RELEASED}. ";
}

extr_moves() {
   # extr_moves   Extract moves
   #
   # The idea is to extract letters between ";B[ or ;W[" and "]".
   # This will also extract a pass in ;B[] and ;W[]
   #
   # The regular expression for egrep 
   #    ^;(B|W)\[ filters a line starting from either ;B[ or ;W[.
   #    Note this regular expression works for egrep, not for grep.
   #
   # The regular expressions for
   #    the first sed command
   #       s/;B\[/\n;B\[/g;	Replace ";B[" with "\n;B[", i.e. put a new line before ";B[".
   #       s/;W\[/\n;W\[/g;	Replace ";W[" with "\n;W[", i.e. put a new line before ";W[".
   #       s/\]/\] /g		Replace "]" with "] ", i.e. put a space after "]".
   #    
   #    the second sed command
   #       /^$/d		Delete an empty line. Find a more concise expression than " sed '/^$/d' "
   #
   #    the third sed command
   #       s/;B\[//g;		Replace B[ with nothing, i.e. delete B[.
   #       s/;W\[//g;    	Replace W[ with nothing, i.e. delete W[.
   #       s/)//g; 		Replace ) with nothing, i.e. delete )
   #       s/]/ /g       	Replace ] with a space

   file_sgf=$1;
   cat ${file_sgf} | egrep "^;(B|W)\[" | sed 's/;B\[/\n;B\[/g; s/;W\[/\n;W\[/g; s/\]/\] /g'|sed '/^$/d' |
   awk '{ print $1;}' | sed 's/;B\[//g; s/;W\[//g; s/]/ /g'
}

############################################
#    Input structure = column vector (1)   #
############################################
# Input: the output of extr_moves in the column vector form. For example, 
#           pd 
#           dd 
#           pp 
#           cq 
#           fc 
#           ...
#           gi
#           ef
#           ed

clmn2matrix() {
   # clmn2matrix   Column vector to matrix
   # The desired output format is a m-by-10 matrix.
   awk '
   BEGIN {
      # NR is a built-in variable for the number of the current record.
   } {
      if ( $0 !~ /^$/ )
      {  # If the record (the currnet line), is not a blank line.
         AWK_ARRAY[NR,1]=NR;
         AWK_ARRAY[NR,2]=$1;
         count++;
      }
   } END {
      no_rows=count/10;
      clmns_last_row=count%10;
      for (r=1;r<=no_rows;r++)
      {
         # Print the actual moves
         printf("%3s %3s %3s %3s %3s %3s %3s %3s %3s %3s\n", 
          AWK_ARRAY[10*(r-1)+1,2],AWK_ARRAY[10*(r-1)+2,2],
          AWK_ARRAY[10*(r-1)+3,2],AWK_ARRAY[10*(r-1)+4,2],
          AWK_ARRAY[10*(r-1)+5,2],AWK_ARRAY[10*(r-1)+6,2],
          AWK_ARRAY[10*(r-1)+7,2],AWK_ARRAY[10*(r-1)+8,2],
          AWK_ARRAY[10*(r-1)+9,2],AWK_ARRAY[10*(r-1)+10,2]);
      }
      # The last row does not necessarily have 10 columns
      # Note "r=no_rows+1" because of r++ in the previous for loop.
      for (c=1;c<=clmns_last_row;c++) printf("%3s ", AWK_ARRAY[10*(r-1)+c,2]);
      printf("\n");
   }'
}

clmn2matrix_index() {
   # clmn2matrix_index   Column vector to matrix with index
   # The desired output format is a m-by-10 matrix.
   awk '
   BEGIN {
      # NR is a built-in variable for the number of the current record.
   } {
      if ( $0 !~ /^$/ )
      {  # If the record (the currnet line), is not a blank line.
         AWK_ARRAY[NR,1]=NR;
         AWK_ARRAY[NR,2]=$1;
         count++;
      }
   } END {
      no_rows=count/10;
      clmns_last_row=count%10;
      for (r=1;r<=no_rows;r++)
      {
         # Print the move indice
         printf("%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n", 
          AWK_ARRAY[10*(r-1)+1,1],AWK_ARRAY[10*(r-1)+2,1],
          AWK_ARRAY[10*(r-1)+3,1],AWK_ARRAY[10*(r-1)+4,1],
          AWK_ARRAY[10*(r-1)+5,1],AWK_ARRAY[10*(r-1)+6,1],
          AWK_ARRAY[10*(r-1)+7,1],AWK_ARRAY[10*(r-1)+8,1],
          AWK_ARRAY[10*(r-1)+9,1],AWK_ARRAY[10*(r-1)+10,1]);

         # Print the actual moves
         printf("%3s %3s %3s %3s %3s %3s %3s %3s %3s %3s\n", 
          AWK_ARRAY[10*(r-1)+1,2],AWK_ARRAY[10*(r-1)+2,2],
          AWK_ARRAY[10*(r-1)+3,2],AWK_ARRAY[10*(r-1)+4,2],
          AWK_ARRAY[10*(r-1)+5,2],AWK_ARRAY[10*(r-1)+6,2],
          AWK_ARRAY[10*(r-1)+7,2],AWK_ARRAY[10*(r-1)+8,2],
          AWK_ARRAY[10*(r-1)+9,2],AWK_ARRAY[10*(r-1)+10,2]);
      }
      # The last row does not necessarily have 10 columns
      # Note "r=no_rows+1" because of r++ in the previous for loop.
      for (c=1;c<=clmns_last_row;c++) printf("%3d ", AWK_ARRAY[10*(r-1)+c,1]);
      printf("\n");

      for (c=1;c<=clmns_last_row;c++) printf("%3s ", AWK_ARRAY[10*(r-1)+c,2]);
      printf("\n");
   }'
}

clmn2row() {
   # clmn2row   Column vector to row vector
   # The desired output format is a 1-by-n row vector.
   awk '
   {
      if ( $0 !~ /^$/ )
      {  # If the record (the currnet line), is not a blank line.
         AWK_ARRAY[NR,1]=$1;
         count++;
      }
   } END {
      # Print the moves
      for (i=1;i<=count;i++) printf("%s ", AWK_ARRAY[i,1]);
      printf("\n");
   }'
}

clmn2row_index() {
   # clmn2row_index   Column vector to row vector with index
   # The desired output format is a 1-by-n row vector.
   awk '
   {
      if ( $0 !~ /^$/ )
      {  # If the record (the currnet line), is not a blank line.
         AWK_ARRAY[NR,1]=$1;
         count++;
      }
   } END {
      # Print the index
      for (i=1;i<=count;i++) printf("%d ", i);
      printf("\n");

      # Print the moves
      for (i=1;i<=count;i++) printf("%s ", AWK_ARRAY[i,1]);
      printf("\n");
   }'
}

# Why column vector to column vector needs to be converted?
# Nothing is converted, just indice is added.
clmn2clmn_index() {
   # clmn2clmn_index   Column vector to column vector with index
   # The desired output format is a n-by-1 column vector.
   awk '
   BEGIN {
      # NR is a built-in variable for the number of the current record.
   } {
      if ( $0 !~ /^$/ )
      {  # If the record, i.e. the currnet line, is not a blank line.
         printf("%d %s\n", NR, $1);
      }
   }'
}

#####################################
#         The numeric output        #
#####################################

char2num() {
   # Characters to numbers for C++.
   # Locations of a move for C++ start from (0,0)
   # This is because an array index in C/C++ starts from 0.
   # column vector to column vector
   # From To
   # a    1
   # b    2
   #   ...
   # In Perl, ord(a) returns 97; ord(b) 98 and so on;
   perl -e '
      $line = <STDIN>;
      while ( $line )
      {
         chop $line;   # Removing the last character. In this case, the newline.
         @move = split(//, $line);
#         printf("%s %s",@move[0],@move[1]);
#         printf("%02d%02d", ord(@move[0])-ord("a"),ord(@move[1])-ord("a"));
         
         if ( ord(@move[0])-ord("a") >= 0 ) {
            printf("%d %d", ord(@move[0])-ord("a"),ord(@move[1])-ord("a"));
         } else {
            # If the move is passed, show "-1 -1".
            printf("-1 -1");
         }
         print "\n";
         $line = <STDIN>;
      } 
   ';
}

# Difference between char2num and char2num_m is only two lines in the Perl script.
#         if ( ord(@move[0])-ord("a") >= 0 ) {
#            printf("%d %d", ord(@move[0])-ord("a"),ord(@move[1])-ord("a"));

char2num_m() {
   # Characters to numbers for Matlab.
   # Locations of a move for Matlab start from (1,1)
   # This is because an array index in C/C++ starts from 1.
   # column vector to column vector
   # From To
   # a    1
   # b    2
   #   ...
   # In Perl, ord(a) returns 97; ord(b) 98 and so on;
   perl -e '
      $line = <STDIN>;
      while ( $line )
      {
         chop $line;   # Removing the last character. In this case, the newline.
         @move = split(//, $line);
#         printf("%s %s",@move[0],@move[1]);
#         printf("%02d%02d", ord(@move[0])-ord("a")+1,ord(@move[1])-ord("a")+1);
         
         if ( ord(@move[0])-ord("a")+1 > 0 ) {
            printf("%d %d", ord(@move[0])-ord("a")+1,ord(@move[1])-ord("a")+1);
         } else {
            # If the move is passed, show "-1 -1".
            printf("-1 -1");
         }
         print "\n";
         $line = <STDIN>;
      } 
   ';
}


#####################################
#        Command line options       #
#####################################
MIN_NUM_OF_ARGS=0;
COMMAND_LINE_OPTS=":hcdDf:il:msSv";


if [ $# -lt ${MIN_NUM_OF_ARGS} ];then
   show_usage_sgf2gsp;
   exit 1;
fi

while getopts ${COMMAND_LINE_OPTS} Option; do
   case ${Option} in
      h ) show_usage_sgf2gsp; exit 1; ;;
      c ) OPT_SGFC=1; ;;
      d ) OPT_DIPLAYOUTPUT=1; ;;
      D ) OPT_DISPLAY4DEBUG=1; ;;
      f ) if [ ${OPTARG} -ge 0 ] && [ ${OPTARG} -le 2 ];then
             OPT_OUTPUTFORMAT=${OPTARG};
#             echo "OPT_OUTPUTFORMAT=${OPT_OUTPUTFORMAT}";
          else
             echo "Error: The argument of the -f option should range from 0 to 2.";
             echo "       0(matrix), 1(column vector), 2(row vector)";
             exit 1;
          fi
         ;;
      i ) OPT_INDEX=1; ;;
      l ) OPT_LOG=1; FILE_LOG=${OPTARG}; ;;
      m ) OPT_LOC4MATLAB=1; ;;
      s ) OPT_SILENTMODE=1; ;;
      S ) OPT_STRINGOUTPUT=1; ;;
      v ) show_version_info; exit 1; ;;
      * ) echo "This option is not supported.";
      	  echo "Type \`sgf2gsp -h\` for help." ;;
   esac
done
shift $((${OPTIND} -1))

if [ ${OPT_DISPLAY4DEBUG} -eq 1 ];then
   echo "OPT_DIPLAYOUTPUT=${OPT_DIPLAYOUTPUT}";
fi

##################################################################################
#                           Convert SGF to GSP                                   #
##################################################################################

# Command-line arguments
file_input=$1;
if [ $# -eq 1 ];then
   # Change the file_input's extension sgf to gsp.
   file_output=${file_input%.*}.gsp;
elif [ $# -eq 2 ];then
   file_output=$2;
else
   show_shortusage_sgf2gsp;
   exit 1;
fi

if [ ${OPT_SILENTMODE} -eq 0 ];then
   echo "file_input=${file_input}"
   echo "file_output=${file_output}"
fi

# Check the SGF syntax with sgfc by Arno Hollos.
# It is recommended to turn this option off when conv_sgf2gsp is used.
# Switch on the OPT_SGFC option in conv_sgf2gsp, not in sgf2gsp.
# It runs faster that way.
if [ ${OPT_SGFC} -eq 1 ] ;then
   if [ ${OPT_SILENTMODE} -eq 0 ];then
      echo "Checking the SGF syntax...(sgf2gsp)";
   fi
   sgfc ${file_input};
fi

############################################
#              Conversion                  #
############################################
# This is the core part of this script.
if [ ${OPT_SILENTMODE} -eq 0 ];then
   echo "Converting...";
fi

if [ ${OPT_DISPLAY4DEBUG} -eq 1 ];then
   echo "OPT_SGFSTRUCTURE=${OPT_SGFSTRUCTURE}";
   echo "OPT_STRINGOUTPUT=${OPT_STRINGOUTPUT}";
   echo "OPT_OUTPUTFORMAT=${OPT_OUTPUTFORMAT}";
   echo "OPT_LOC4MATLAB=${OPT_LOC4MATLAB}";
fi

# In essence, this program is
#
#    extr_moves ${sgf_file} > ${gsp_file};
#
# The following options provide different formats.

if [ ${OPT_STRINGOUTPUT} -eq 0 ];then
   # Locations of a move for C++. A locations starts from (0,0)
   if [ ${OPT_LOC4MATLAB} -eq 0 ];then
      # Without index
      if [ ${OPT_INDEX} -eq 0 ];then
         if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
# THIS IS THE COMMAND FOR THE DEFAULT SETTING.
            extr_moves ${file_input} | char2num > ${file_output};
# THIS IS THE COMMAND FOR THE DEFAULT SETTING.
         elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
            extr_moves ${file_input} | char2num | clmn2matrix > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
            extr_moves ${file_input} | char2num | clmn2row > ${file_output};
         fi
      # With index
      else
         if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
            extr_moves ${file_input} | char2num | clmn2clmn_index > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
            extr_moves ${file_input} | char2num | clmn2matrix_index > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
            extr_moves ${file_input} | char2num | clmn2row_index > ${file_output};
         fi
      fi

   # Locations of a move for Matlab. A locations starts from (1,1)
   else
      # Without index
      if [ ${OPT_INDEX} -eq 0 ];then
         if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
            extr_moves ${file_input} | char2num_m > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
            extr_moves ${file_input} | char2num_m | clmn2matrix > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
            extr_moves ${file_input} | char2num_m | clmn2row > ${file_output};
         fi
      # With index
      else
         if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
            extr_moves ${file_input} | char2num_m | clmn2clmn_index > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
            extr_moves ${file_input} | char2num_m | clmn2matrix_index > ${file_output};
         elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
            extr_moves ${file_input} | char2num_m | clmn2row_index > ${file_output};
         fi
      fi
   fi

else
   # Without index
   if [ ${OPT_INDEX} -eq 0 ];then
      if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
         extr_moves ${file_input} > ${file_output};
      elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
         extr_moves ${file_input} | clmn2matrix > ${file_output};
      elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
         extr_moves ${file_input} | clmn2row > ${file_output};
      fi
   # With index
   else
      if [ ${OPT_OUTPUTFORMAT} -eq 0 ];then
         extr_moves ${file_input} | clmn2clmn_index > ${file_output};
      elif [ ${OPT_OUTPUTFORMAT} -eq 1 ];then
         extr_moves ${file_input} | clmn2matrix_index > ${file_output};
      elif [ ${OPT_OUTPUTFORMAT} -eq 2 ];then
         extr_moves ${file_input} | clmn2row_index > ${file_output};
      fi
   fi
fi

############################################
#              Other stuff                 #
############################################
if [ ${OPT_DIPLAYOUTPUT} -eq 1 ];then
   if test -f ${file_output};then
      cat ${file_output};
   else
      echo "Error: Can't open ${file_output}."
   fi
fi

echo "${file_output} is successfully converted."
exit 0;

# EOF
