#!/bin/bash
# mrun_sgf2gsp     is a wrapper around sgf2gsp.
#                  mrun_sgf2gsp runs sgf2gsp multiple times.
#
# Last updated:  Oct.15, 2008 (Wed)
# First written: Jan.21, 2008 (Mon)
# Version: 1.3
# Written by Tae-Hyung D. Kim, tk424@mst.edu

##################################################################################
#        			Options and Configuration		         #
##################################################################################

#####################################
# Default options and configuration #
#####################################
# PLEASE DO NOT CHANGE THESE VALUES!
VERSION="1.3";
VER_RELEASED="Oct.15, 2008 (Wed)";

OPT_DUMMY_CMD=0;
OPT_DISPLAY4DEBUG=0;
OPT_SGFC=0;
OPT_PRINTPROGRESS=0;
OPT_OUTPUTFORMAT=0;
OPT_NUMERICOUTPUT=0;
OPT_RECURSIVE=0;
MOD_DIVISOR=10;

# PLEASE DO NOT CHANGE THESE VALUES!

##################################################################################
#                                Procedures                                      #
##################################################################################

show_usage_conv_sgf2nif() {
echo "
conv_sgf2nif is a text-editing program that converts files in the SGF format to the NIF format. SGF stands for Smart Game Format and NIF is Neural-Networks Input Format. A SGF file is a text file containing game trees in the Smart Game Format. A child program sgf2nif extracts some necessary information from a single SGF file, and reformats the information into a single NIF file. The NIF format is designed as an input format suitable for our Neural Networks module. The issue on the best NIF format remains open and needs to be investigated further. Internally, conv_sgf2nif applies the child program sgf2nif to a group of SGF files stored in a single directory.

Usage: conv_sgf2nif [option] [dir4sgf dir4nif]
Input: a group of files in the SGF format (*.sgf) stored in a single input directory
Output: a group of files in the NIF format (*.nif) in a single output directory

Shell options:
   -h   Display help. Type \`conv_sgf2nif -h\` for help.
   -c   Check the SGF syntax with sgfc by Arno Hollosi.
   -d   Display the dummy commands. The commands are NOT executed.
   -D   Debug diaplay mode. Some internal variables are displayed.
   -f   Configure the output format: 0 (m-by-10 matrix), 1 (n-by-1 column vector), 2 (1-by-n row vector)
   -n   Numeric output
   -p   Print the progress with dots. The frequency to show dots is stored in MOD_DIVISOR.
   -R   Recursive. This is a powerful option.
           $ conv_sgf2nif -f 1 -n -R
        All the SGF files in directory sgf_files are converted to NIF files in directory nif_files
        with exactly same directory structure.
        Currently, only the -f and -n options are used because of the intense computational burden.
        You can change the options MANUALLY if necessary.
   -v   Display the version information.
Examples:
   Run the following command in directory data in order to convert SGF files recursively.
      $ conv_sgf2nif -f 1 -n -R
   Other examples include
      $ conv_sgf2nif  $ conv_sgf2nif -c   $ conv_sgf2nif -d   $ conv_sgf2nif -p 100
      $ conv_sgf2nif -n -f 1 -p
   
Values before/after the options are set:
   Option   Before                After
   -c       OPT_SGFC=0;           OPT_SGFC=1;
   -d       OPT_DUMMY_CMD=0;      OPT_DUMMY_CMD=1;
   -D       OPT_DISPLAY4DEBUG=0;  OPT_DISPLAY4DEBUG=1;
   -f       OPT_OUTPUTFORMAT=0;   OPT_OUTPUTFORMAT=${OPTARG}
   -n       OPT_NUMERICOUTPUT=0;  OPT_NUMERICOUTPUT=1;
   -p       OPT_PRINTPROGRESS=0;  OPT_PRINTPROGRESS=1;
            MOD_DIVISOR=10;       MOD_DIVISOR='new value';
   -R       OPT_RECURSIVE=0;      OPT_RECURSIVE=1;
Bug report: Please report bugs at tk424@mst.edu.
";
}

show_version_info() {
   echo "   conv_sgf2nif version ${VERSION}, ${VER_RELEASED}. ";
}

#####################################
#        Recursive conversion       #
#####################################

perform_non_recursive_conv() {
   # perform_non_recursive_conv   Perform non-recursive conversion.
   #
   # This procedure is more like a chunk of codes rather than a procedure with input & output.
   #
   # Overview:
   #    Run sgf2nif for all the files in directory DIR_SGF.
   #    All the SGF files in the directory are converted.
   #    SGF files in the subdirectories are NOT converted.
   #    As a convention, the output file name of sgf2nif is matched to the input file name 
   #    in order to easily distinguish the input/output relationship.
   #    For example, the output file name for filename.sgf is filename.nif.

   # Use of the if statement outside the for loop looks "ugly".
   # But it runs faster than the if-inside-for structure when many files are converted.
      if test ! -f *.sgf;then
         echo "Warning: No SGF detected. Conversion will be attempted, but you may have no results.";
         echo "         If the SGF files are stored in subdirectories, use the -R option.";
      fi

      if [ ${OPT_DUMMY_CMD} -eq 1 ] ;then
         echo "*********** Dummy commands: these commands are not executed! ***********";
         if [ ${OPT_NUMERICOUTPUT} -eq 0 ];then
            for filename_sgf in *.sgf;do
               # filename_nif is redundant, but explicitly specify it for clarity.
               if test -s ${filename_sgf};then
                  filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                  echo " sgf2nif -s -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif}";
               fi
            done
         else
            # Additionally use the -n options.
            for filename_sgf in *.sgf;do
               # filename_nif is redundant, but explicitly specify it for clarity.
               if test -s ${filename_sgf};then
                  filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                  echo " sgf2nif -s -n -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif}";
               fi
            done
         fi
         echo "*********** Dummy commands: these commands are not executed! ***********";
      else
         if [ ${OPT_PRINTPROGRESS} -eq 1 ];then
            cntr=0;												# Counter
            if [ ${OPT_NUMERICOUTPUT} -eq 0 ];then
               for filename_sgf in *.sgf;do
                  if [ `expr ${cntr} % ${MOD_DIVISOR}` -eq 0 ];then
                     echo -n ".";
                  fi
                  if test -s ${filename_sgf};then
                     filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                     sgf2nif -s -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif};
                  fi
                  let cntr++;
#                 echo ${cntr};
               done
            else
               for filename_sgf in *.sgf;do
                  if [ `expr ${cntr} % ${MOD_DIVISOR}` -eq 0 ];then
                     echo -n ".";
                  fi
                  if test -s ${filename_sgf};then
                     filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                     sgf2nif -s -n -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif};
                  fi
                  let cntr++;
#                 echo ${cntr};
               done
            fi
            echo "";
         else
            if [ ${OPT_NUMERICOUTPUT} -eq 0 ];then
               for filename_sgf in *.sgf;do
                  if test -s ${filename_sgf};then
                  # If the file is not empty
#                     echo "sgf2nif -s -f ${OPT_OUTPUTFORMAT} ${filename_sgf}";
                     filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                     sgf2nif -s -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif};
                  fi
               done
            else
               for filename_sgf in *.sgf;do
                  if test -s ${filename_sgf};then
                     filename_nif="../${DIR_NIF}/${filename_sgf%.*}.nif";
                     sgf2nif -s -n -f ${OPT_OUTPUTFORMAT} ${filename_sgf} ${filename_nif};
                  fi
               done
            fi
         fi
      fi

}

#####################################
#      Non-recursive conversion     #
#####################################

save_dirstruct() {
   local file_list2conv=$1;
   local file_dirstruct=$2;

   cat ${file_list2conv} | awk '
   BEGIN {
      dir_output=ARGV[1]; delete ARGV[1];
   } {
      if ( $1 ~/^.\//)
      {
         split($1,dir,":");
         print dir[1]>dir_output;
      }
   }' ${file_dirstruct};
};

mkdir_recursively() {
   # mkdir_recursively   Make directory recursively
   #
   # Input: a text file with the complete target directory structure 
   # Output: subdirectories are created.

   local file_dirstruct=$1;
   echo "Making directories from ${file_dirstruct}";
   cat ${file_dirstruct} | awk '{system("mkdir " $1);}';
}

list_files2conv() {
   # list_files2conv   List SGF files to convert
   #
   # Input: file_list2conv
   # Output: SGF file names in the current directory
   #
   # Overview:
   #   file_list2conv is generated with 'ls -lR'.
   #   It contains the information on all the subdirectries along with SGF file names in the subdirectory.
   #   If dir_current matches the subdirectory name in file_list2conv, print the SGF file names
   #   followed by the subdirectory name.

   local file_list2conv=$1;
   local dir_current=$2;

   cat ${file_list2conv} | awk '
   BEGIN {
      DIR2MATCH=ARGV[1]; delete ARGV[1];
      is_matched=0; is_over=0;
   } {
      if ( is_over==0 )
      {
         if ( is_matched==0 )
         {
            split($1,dir,":");
            if ( dir[1]==DIR2MATCH )
            {
               is_matched=1;
            }
         } else if ( is_matched==1 )
         {
            if ( $1 !~/^d/ && ($8~/\.sgf/ || $8~/\.SGF/) )
            {
               print $8;
            }
            if ( $0 ~/^$/ )
            {
               is_over=1;
            }
         }
      } else {
         exit 0;
      }
   }' ${dir_current}; 
}

perform_recursive_conv() {
   # perform_recursive_conv   Perform recursive conversion.
   #
   # Input: SGF files in all the subdirectories in directory sgf_files
   # Output: NIF files stored in directory nif_files
   #
   # Overview:
   #    This function is a wrapper around the command sgf2nif.
   #    What this function does is to recursively find a SGF file to convert
   #    and then feed it to sgf2nif with proper options. That's it.
   #    What makes this process difficult is the complicated directory structure.
   #    Files other than SGF (*.sgf) are, ocassionally, included in the subdirectory,
   #    which need to be avoided.

   local file_dirstruct=$1;
   local file_log=$2;
   local file_list2conv=$3;
   local dir_this=$4;
   local dir_tmp_sgf=$5;
   local dir_tmp_nif=$6;
   local opt_outputformat=$7;

     count=0;
     for subdir in `cat ${dir_this}/${file_dirstruct}`;do
#     for subdir in "./Rongen/igs";do
#      for subdir in "./By_Heart/takemiya_2/TakemiyaMasaki";do  ;# 2002-09-22.sgf
        echo "subdir=$subdir";
        echo "subdir=$subdir">>${dir_this}/${file_log};
        cd ${subdir};
        dir_tmp=${subdir#*./};
        for filename_sgf in `list_files2conv ${dir_this}/${file_list2conv} ${subdir}`;do
           echo -e "\t${filename_sgf} ">>${dir_this}/${file_log};
#           echo "${filename_sgf}";
           filename_nif="${dir_tmp_nif}/${dir_tmp}/${filename_sgf%.*}.nif";
#           echo "sgf2nif -s -f ${opt_outputformat} ${filename_sgf} ${filename_nif}">>${dir_this}/${file_log};
           sgf2nif -s -f ${opt_outputformat} -n ${filename_sgf} ${filename_nif}>>${dir_this}/${file_log};
           let count++;
        done
        cd ${dir_tmp_sgf};
     done
}

##################################################################################
#     Directory, files, and options changed from the command-line options        #
##################################################################################
# Given the command line options, appropriate changes are made in this part.
# If you want to change options and configuration, please do so in this part,
# NOT in the default options and configuration part. 

#####################################
#        Command line options       #
#####################################
MIN_NUM_OF_ARGS=0;
COMMAND_LINE_OPTS=":hcdDf:np:Rv";

if [ $# -lt ${MIN_NUM_OF_ARGS} ];then
   show_usage_conv_sgf2nif;
   exit 1;
fi

while getopts ${COMMAND_LINE_OPTS} Option; do
   case ${Option} in
      h ) show_usage_conv_sgf2nif; exit 1; ;;
      c ) OPT_SGFC=1; ;;
      d ) OPT_DUMMY_CMD=1; ;;
      D ) OPT_DISPLAY4DEBUG=1; ;;
      f ) if [ ${OPTARG} -ge 0 ] && [ ${OPTARG} -le 2 ];then
             OPT_OUTPUTFORMAT=${OPTARG};
          else
             echo "Error: The argument of the -f option should range from 0 to 2.";
             echo "       0(matrix), 1(column vector), 2(row vector)";
             show_usage_conv_sgf2nif;
             exit 1;
          fi
         ;;
      n ) OPT_NUMERICOUTPUT=1; ;;
      p ) OPT_PRINTPROGRESS=1; 
          MOD_DIVISOR=${OPTARG};
          echo "The -p option is turned on; a dot is displayed every ${MOD_DIVISOR} files.";
          ;;
      R ) OPT_RECURSIVE=1; ;;
      v ) show_version_info; exit 1; ;;
      * ) echo "This option is not supported.";
      	 echo "Type \`conv_sgf2nif -h\` for help.";
          exit 1;
          ;;
   esac
done
shift $((${OPTIND} -1))

if [ ${OPT_DISPLAY4DEBUG} -eq 1 ];then
   echo "OPT_OUTPUTFORMAT=${OPT_OUTPUTFORMAT}"
fi

#####################################
#        Directory Structure        #
#####################################
# Assume this script is located in directory bin.
DIR_ROOT4BADUK=`cd ..;pwd`; #echo "${DIR_ROOT4BADUK}";
DIR_THIS=`pwd`;
DIR_BIN="bin";
DIR_DATA="data";
DIR_SGF="sgf_files";
DIR_NIF="nif_files";
DIR_SGF_A=${DIR_ROOT4BADUK}/${DIR_DATA}/${DIR_SGF};
DIR_NIF_A=${DIR_ROOT4BADUK}/${DIR_DATA}/${DIR_NIF};

FILE_LIST2CONV="list2conv.log";
FILE_DIRSTRUCT="dir_struct.log";
FILE_LOG="conv_sgf2nif.log";
# Set the path for the executables in directory bin.
export PATH="${PATH}:${DIR_ROOT4BADUK}/${DIR_BIN}"

# If the directory does not exist, create one.
cd ${DIR_ROOT4BADUK}/${DIR_DATA};
if test ! -d ${DIR_NIF}; then
   echo "   Creating a directory ${DIR_NIF}";
   mkdir ${DIR_NIF};
fi
cd ${DIR_ROOT4BADUK};
# If the directory does not exist, create one.

##################################################################################
#                           Convert SGF to NIF                                   #
##################################################################################
echo "Proceed to convert ALL of the SGF files to NIF? y/n";
read;

if [ ${REPLY} == "n" ] || [ ${REPLY} == "N" ];then
   echo "Aborted.";
   echo "To convert a single file, please use sgf2nif.";
   echo "Exiting...";
   exit 1;
elif [ ${REPLY} == "y" ] || [ ${REPLY} == "Y" ];then
   # Change directory to where SGF files are located.
   cd ${DIR_ROOT4BADUK}/${DIR_DATA}/${DIR_SGF};
   if [ ${OPT_RECURSIVE} -eq 0 ];then
      # Check the SGF syntax with sgfc by Arno Hollos.
      if [ ${OPT_SGFC} -eq 1 ] ;then
         echo "Checking the SGF syntax...(conv_sgf2nif)";
         for filename_sgf in *.sgf;do
            if test -s ${filename_sgf};then
               sgfc ${filename_sgf};
            fi
         done
      fi

      echo "Converting SGF files in ...";
      perform_non_recursive_conv;

      if [ ${OPT_DISPLAY4DEBUG} -eq 1 ];then
         TIME_EOF=`date +"%X, %F";`;
         echo -e "\033[36mEOF: conv_sgf2nif, ${TIME_EOF}\033[0m";
      fi
      exit 0;
   elif [ ${OPT_RECURSIVE} -eq 1 ];then
      if test -f ${DIR_THIS}/${FILE_LOG};then
         rm ${DIR_THIS}/${FILE_LOG};
      fi
      echo "*********** Recursive conversion *********** ";
      echo "*********** Recursive conversion *********** ">${DIR_THIS}/${FILE_LOG};
      if test ! -f ${DIR_THIS}/${FILE_LIST2CONV};then
         echo "Creating the list of files: ls -lR > ${DIR_THIS}/${FILE_LIST2CONV}";
         echo "Creating the list of files: ls -lR > ${DIR_THIS}/${FILE_LIST2CONV}">>${DIR_THIS}/${FILE_LOG};
         ls -lR > ${DIR_THIS}/${FILE_LIST2CONV};
      fi
      if test ! -f ${DIR_THIS}/${FILE_DIRSTRUCT};then
         echo "Saving the directory structure ${DIR_THIS}/${FILE_DIRSTRUCT}";
         echo "Saving the directory structure ${DIR_THIS}/${FILE_DIRSTRUCT}">>${DIR_THIS}/${FILE_LOG};
         save_dirstruct ${DIR_THIS}/${FILE_LIST2CONV} ${DIR_THIS}/${FILE_DIRSTRUCT};
     fi
     cd ${DIR_NIF_A};
     echo "Making directories from ${DIR_THIS}/${FILE_DIRSTRUCT}">>${DIR_THIS}/${FILE_LOG};
     mkdir_recursively ${DIR_THIS}/${FILE_DIRSTRUCT};
     cd ${DIR_SGF_A};

     CFG_FILES="${FILE_DIRSTRUCT} ${FILE_LOG} ${FILE_LIST2CONV}";
     CFG_DIRS="${DIR_THIS} ${DIR_SGF_A} ${DIR_NIF_A}";
     CFG_OPTS="${OPT_OUTPUTFORMAT}";
     perform_recursive_conv  ${CFG_FILES} ${CFG_DIRS} ${CFG_OPTS};

     echo "Number of converted files: ${count}";
     echo "Number of converted files: ${count}">>${DIR_THIS}/${FILE_LOG};
   fi
else
   echo "Please enter \"y\" or \"n\".";
   echo "To convert a single file, please use sgf2nif.";
   echo "Exiting...";
   exit 1;
fi

#EOF
exit 0;
