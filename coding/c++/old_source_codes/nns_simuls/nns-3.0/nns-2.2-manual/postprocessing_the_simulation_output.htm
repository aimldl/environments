<html>

<head>
<title>4.</title>
<meta name="generator" content="Namo WebEditor">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<h1>5. Postprocessing the simulation output </h1>

<P STYLE="margin-bottom: 0in">5.1. Overview</P>

<P STYLE="margin-bottom: 0in">The simulator outputs a text-based trace file, e.g. default.trc, when it opts to generate the trace file.<br>
This option can be turned on in a configuration file, e.g. default.cfg.<br>
Once, the trace file is generated, it can be postprocessed with a bash script <i>nns_postprocess</i> in directory bin.<br>
For example,</P>
<pre STYLE="margin-bottom: 0in">  $ nns_postprocess example.trc </pre>
<P STYLE="margin-bottom: 0in">Running this script creates output files. <br>
For the 2x2 settings with CSRN, csrn.out, cell0.out, cell1.out, cell2.out, and cell3.out are generated.</P>
<P STYLE="margin-bottom: 0in">While nns_postprocess is central to the postprocessing, a core procedure in nns_postprocess is process_trace_file.<br>
What ths procedure does is to extract related lines and save them into a single file.<br>
For example, all the lines with a string &quot;Csrn&quot; are stored in csrn.out. <br>
The trace file shall be designed so that the string &quot;Csrn&quot; is included to represent CSRN only .<br>
The commands to extract csrn.out is as follows.</P>
<P STYLE="margin-bottom: 0in">&nbsp;&nbsp;&nbsp;cat ${dir_output}/$file_trace} | grep &quot;Csrn&quot; &gt; ${dir_output}/csrn.out</P>
<P STYLE="margin-bottom: 0in">5.2. Simulation log for debugging information</P>
<p>Certain debugging information can be logged to an output file. <br>
While the default output file is default.out, a&nbsp;simulation log is turned on only when the simulation trace is switched off.<br>
The purpose of a log file is to log some debugging information.</p>
<p>On the other hand, the trace file records the simulation results which will be postprocessed. <br>
Switching on a simulation log is a three-step process.</p>
<p>Step 1:</p>
<p>Before turning on the simulation logs, define OPT_LOG_SIMULATION in MyDefinitions.hpp to 1. In other words,</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;define OPT_LOG_SIMULATION 1</p>
<p>Step 2:</p>
<p>Compile the simulator. Doing so adds a chunk of lines to log the simulation. On the other hand, setting OPT_LOG_SIMULATION to 0, i.e.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;define OPT_LOG_SIMULATION 0</p>
<p>&nbsp;&nbsp;, and recompiling the simulator removes the added overhead. Doing so enables the simulator to run faster. Additionally, it reduces the executable size.</p>
<p>Step 3:</p>
<p>Set the following logging options to 1. For example, set log_data to 1.</p>
<p><a href="index.htm">Back to Table of Contents</a> <a href="debugging_tool_eclipse.htm">next</a></p>
<hr>
<p>Copyright ?2009 Tae-Hyung &quot;T&quot; Kim.</p>
</body>

</html>