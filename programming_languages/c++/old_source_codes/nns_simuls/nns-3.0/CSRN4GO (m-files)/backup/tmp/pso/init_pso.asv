function pso=init_pso(pso,nnc_type),
% init_pso              Initialize PSO (Particle Swarm Intelligence)
%
% Velocity update equation 
% The velocity update equation (1) is comprised of:
%    inertia of the previous velocity, 
%    the cognitive acceleration term, and 
%    the social acceleration term. 
% This velocity is moving towards both to the local best of the given particle and the global best positions of the whole population. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           pso.p(article)          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialize parameters of the PSO algorithm for a particle
% pso.p.best_p_id is necessary to keep track of the best particle.
% Without this index, relationship of H_o in the inner-loop recurrence will
% be messed up.
pso.p.best_p=0;
% Global fitness
% An arbitrary number large enough to update the global best at the
% beginning of the iteration. The following condition is in mind.
% if ( pso.cfg.p.g_fitness > min(pso.p.P_fitness) )
pso.p.g_fitness = 10^13;
pso.p.P_BEST = zeros( pso.cfg.p.d,pso.cfg.p.size );
pso.p.G_BEST = zeros( pso.cfg.p.d,1 );
pso.p.P_fitness = zeros( 1,pso.cfg.p.size );
% Large enough numbers for a vector G_fitness
pso.p.G_fitness = pso.p.g_fitness.*ones( 1,pso.cfg.p.size );
pso.p.L_ID=rand( pso.cfg.p.d,pso.cfg.p.size );
pso.p.V_ID=rand( size(pso.p.L_ID) );

if ( nnc_type=='snr' ),
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %         pso.a(ssociate)           %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    pso.a.g_fitness=pso.p.g_fitness;
    pso.a.P_fitness = zeros( 1,pso.cfg.a.size );
    for pp=1:pso.cfg.p.size,
        pso.a(pp).H_o=rand( pso.cfg.N_h,pso.cfg.a.size );
        pso.a(pp).P_BEST = zeros( pso.cfg.a.d,pso.cfg.a.size );
        pso.a(pp).G_BEST = zeros( pso.cfg.a.d,1 );
        %pso.a(pp).L_ID=rand( pso.cfg.a.d,pso.cfg.a.size );
        pso.a(pp).L_ID=rand( pso.cfg.a.d,board.cfg.N_s );
        pso.a(pp).V_ID=rand( size(pso.a(pp).L_ID) );
    end;
end;