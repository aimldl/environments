#!/bin/bash
#  install_kubernetes
#
#  * Rev.2: 2020-12-10 (Thu)
#  * Rev.1: 2020-07-27 (Mon)
#  * Draft: 2020-07-14 (Tue)
#
#  Run the commands on a master and then worker node(s).
#    $ chmod +x install_kubernetes
#    $ ./install_kubernetes
#    
#  To edit this file, run:
#    $ vi install_kubernetes
#      or
#    $ nano install_kubernetes
#
#  Dependencies
#  This script depends on some other scripts.
#    function_definitions
#
#  When I revisited this code, it was hard to read.
#  So I considered putting all codes into a single script.
#  When I opened the first script of function_definitions,
#  I recalled this script is the refactored version from all-in-one-script
#    which is a lot harder to grasp the entire structure.
#
source function_definitions
# List of functions
#   read_installation_option
#   read_master_worker_or_test
#   deactivate_swap_memory
#   get_installed_packages
#   uninstall_docker
#   install_docker
#   configure_docker
#   verify_docker
#   ask_to_reinstall
#   safe_install_docker4kubernetes
#   get_matched_versions_of_docker_kubernetes_kubeflow
#   install_kubeadm_kubelet_kubectl
#   install_common_parts
#   setup_master
#   get_nodes
#   extract_command2join_worker_nodes
#   safe_append
#   generate_commands4worker
#   get_token
#   deploy_k8s_dashboard

# Options to install K8s (Kubernetes)
#   1-1. Stand-alone installation of K8s on master
#   1-2. Stand-alone installation of K8s on worker
#   1-3. K8s installation for Kubeflow on master
#   1-4. K8s installation for Kubeflow on worker

INSTALL_OPTION=`read_installation_option`
NODE_TYPE=`read_master_worker_or_test`
printf '\n'
printf "$INSTALL_OPTION will be installed on $NODE_TYPE. \n"

# Expected outputs
#   Kubernetes will be installed on master.
#   Kubernetes will be installed on worker.
#   Kubernetes_and_Kubeflow will be installed on master.
#   Kubernetes_and_Kubeflow will be installed on worker.

if [ $NODE_TYPE == 'master' ]; then
  printf 'Sourcing commands4master ... \n'
  source commands4master
elif [ $NODE_TYPE == 'worker' ]; then
  # Run commands4master first. commands4worker is generated by commands4master.
  # Namely, commands4worker does not exist at first.
  printf 'Sourcing commands4worker ... \n'
  source commands4worker
elif [ $NODE_TYPE == 'test' ]; then
  printf 'Sourcing commands4test ... \n'
  source commands4test
else
  printf "Error: Incorrect NODE_TYPE $NODE_TYPE. \n"
fi

# EOF
